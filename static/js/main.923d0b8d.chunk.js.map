{"version":3,"sources":["Constants/Colors.js","Constants/Data.js","Components/Home/NavBar.js","Constants/Icons.js","Utilities/Numbers.js","Components/UrbicaMap.js","Utilities/Json.js","Utilities/MagicUtility.js","Components/Magic/PrintPdf.js","Components/Magic/Index.js","App.js","serviceWorker.js","index.js"],"names":["blue1","SectionEnum","Object","freeze","maps","mixpanel","react","aws","sectionData","title","description","section","magic","urbicaMapConfiguration","longitude","latitude","zoom","Bar","styled","div","Tab","button","NavBar","props","useState","useEffect","console","log","map","item","index","onClick","setCurrentSection","mapIcon","Image","src","process","generateRandomNumber","from","to","fixedPlaces","Math","random","toFixed","generateRandomCoordinates","neighbouringCoords","generateRandomDataSet","numberRequired","initialViewport","output","length","lngLat","newEntry","siteName","uniqueId","push","Dialog","style","width","height","color","background","borderRadius","textAlign","ClusterMarker","pointCount","UrbicaReactHookMap","hoverSite","setHoverSite","mapPins","setMapPins","visible","setVisible","configuration","viewport","setViewport","mapStyle","accessToken","onViewportChange","closeButton","closeOnClick","radius","extent","nodeSize","component","onMouseEnter","onMouseLeave","a","document","createElement","body","appendChild","MIDDLE_ROW","BOTTOM_ROW","MIDDLE_COL","RIGHT_COL","jsPDFSettings","orientation","unit","format","PrintPdf","imageUris","Button","variant","doc","jsPDF","position","x","y","includes","MARGIN_TOP","MARGIN_LEFT","DeterminePosition","addImage","addPage","save","disabled","Container","FormContainer","Magic","pdfReady","setPdfReady","decklist","setDecklist","setImageUris","notFound","setNotFound","Form","Group","Text","className","id","as","controlId","Control","rows","onChange","target","value","notFoundList","parsedDataImages","split","forEach","cardName","foundCard","ScryfallData","find","element","name","imageUri","readOnly","ready","App","currentSection","displayElement","Boolean","window","location","hostname","match","ReactDOM","render","basename","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.923d0b8d.chunk.js","sourcesContent":["export const blue1 = '#68829B';\nexport const blue2 = '#576D82';\nexport const blue3 = '#465768';","export const SectionEnum = Object.freeze({ maps: 0, mixpanel: 1, react: 2, aws: 3 });\n\nexport const sectionData = [\n  {\n    title: \"Mapbox\",\n    description: \"\",\n    section: SectionEnum.maps,\n  },\n  {\n    title: \"Mixpanel\",\n    description: \"\",\n    section: SectionEnum.mixpanel,\n  },\n  {\n    title: \"React\",\n    description: \"\",\n    section: SectionEnum.react,\n  },\n  {\n    title: \"AWS\",\n    description: \"\",\n    section: SectionEnum.aws,\n  },\n  {\n    title: \"Typescript\",\n    description: \"\",\n    section: SectionEnum.react,\n  },\n  {\n    title: \"Magic\",\n    description: \"\",\n    section: SectionEnum.magic,\n  },\n];\n\nexport const mapConfiguration = {\n  lngLat: [147.19554, -31.5632],\n  zoom: [10],\n};\n\nexport const urbicaMapConfiguration = {\n  longitude: 147.19554,\n  latitude: -31.5632,\n  zoom: 10,\n};\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { blue1, blue2, blue3 } from \"../../Constants/Colors\";\nimport { sectionData } from \"../../Constants/Data\";\n\nconst Bar = styled.div`\n  display: flex;\n  width: 80vw;\n  background: ${blue3};\n`;\n\nconst Tab = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 4px;\n  padding: 8px;\n  transition: background-color 0.2s ease-in-out, color 0.2s ease-in-out;\n  font-size: 0.8rem;\n  outline: none;\n  background: ${blue2};\n\n  &:hover {\n    background: ${blue1};\n  }\n`;\n\nconst NavBar = (props) => {\n  const [users, setUsers] = useState([]);\n  const [showObject, setShowObject] = useState(false);\n\n  useEffect(() => {\n    console.log(\"Component did mount\");\n  }, []);\n\n  useEffect(() => {\n    console.log(\"On props change\");\n  }, [props]);\n\n  return (\n    <Bar>\n      {sectionData.map((item, index) => (\n        <Tab\n          key={index}\n          onClick={(item) => props.setCurrentSection(item.section)}\n        >\n          <h1>{item.title}</h1>\n        </Tab>\n      ))}\n    </Bar>\n  );\n};\n\nexport default NavBar;\n","\nexport const basepath = process.env.PUBLIC_URL;\n// export const logo = basepath + LOGO;\n// export const helpIcon = basepath + HELP_ICON;\n// export const closeIcon = basepath + CLOSE_ICON;\n// export const editIcon = `${basepath}/images/icons/edit.svg`;\n// export const deleteIcon = `${basepath}/images/icons/delete.svg`;\n\nexport const mapIcon = new Image(15, 22.5);\nmapIcon.src = `${basepath}/images/icons/droplet_purple.svg`;\nexport const siteAuditMarkers = [\"mapIcon\", mapIcon];\n\n// const bullseye = new Image(100, 100);\n// bullseye.src = `${basepath}/images/icons/bullseye.svg`;\n// export const bullseyeIcon = [\"bullseye\", bullseye];\n\n// const iconA = new Image(15, 22.5);\n// iconA.src = `${basepath}/images/icons/droplet_darkblue.svg`;\n// const mapIconA = [\"iconA\", iconA];\n\n// const iconB = new Image(15, 22.5);\n// iconB.src = `${basepath}/images/icons/droplet_green.svg`;\n// const mapIconB = [\"iconB\", iconB];\n\n// const iconC = new Image(15, 22.5);\n// iconC.src = `${basepath}/images/icons/droplet_lightblue.svg`;\n// const mapIconC = [\"iconC\", iconC];\n\n// const iconD = new Image(15, 22.5);\n// iconD.src = `${basepath}/images/icons/droplet_orange.svg`;\n// const mapIconD = [\"iconD\", iconD];\n\n// const iconE = new Image(15, 22.5);\n// iconE.src = `${basepath}/images/icons/droplet_pink.svg`;\n// const mapIconE = [\"iconE\", iconE];\n\n// export const filterLayerIcons = [\n//     mapIconA,\n//     mapIconB,\n//     mapIconC,\n//     mapIconD,\n//     mapIconE,\n// ]\n","const BUFFER = 50;\n\nconst generateRandomNumber = (from, to, fixedPlaces) =>\n  (Math.random() * (to - from) + from).toFixed(fixedPlaces) * 1;\n\nconst generateRandomCoordinates = (neighbouringCoords) => {\n  if (neighbouringCoords) {\n    return [\n      // Generates random longitude value\n      generateRandomNumber(\n        neighbouringCoords[0] - BUFFER,\n        neighbouringCoords[0] + BUFFER,\n        3\n      ),\n      // Generates random latitude value\n      generateRandomNumber(\n        neighbouringCoords[1] - BUFFER,\n        neighbouringCoords[1] + BUFFER,\n        3\n      ),\n    ];\n  }\n\n  return [generateRandomNumber(-180, 180, 3), generateRandomNumber(-90, 90, 3)];\n};\n\n\nexport const generateRandomDataSet = (numberRequired, initialViewport) => {\n  const output = [];\n\n  if (numberRequired > 0 && initialViewport) {\n    while (output.length < numberRequired) {\n      const lngLat = initialViewport.longitude ? generateRandomCoordinates([\n        initialViewport.longitude,\n        initialViewport.latitude,\n      ]) : generateRandomCoordinates(initialViewport);\n\n      const newEntry = {\n        siteName: `Site # ${output.length + 1}`,\n        lngLat,\n        longitude: lngLat[0],\n        latitude: lngLat[1],\n        uniqueId: output.length + 1,\n      };\n\n      output.push(newEntry);\n    }\n  }\n\n  return output;\n};\n","import React, { useState, useEffect } from \"react\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport styled from \"styled-components\";\nimport MapGL, { Layer, Marker, Popup } from \"@urbica/react-map-gl\";\nimport Cluster from \"@urbica/react-map-gl-cluster\";\nimport { mapIcon } from \"../Constants/Icons\";\nimport { generateRandomDataSet } from \"../Utilities/Numbers\";\nimport { blue1 } from \"../Constants/Colors\";\n\nconst NUMBER_OF_DATA_POINTS = 500;\n\nconst Dialog = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 8px;\n  max-height: 30vh;\n  max-width: 30vh;\n  background: ${blue1};\n`;\n\nconst style = {\n  width: \"20px\",\n  height: \"20px\",\n  color: \"#fff\",\n  background: \"#1978c8\",\n  borderRadius: \"20px\",\n  textAlign: \"center\",\n};\n\nconst ClusterMarker = ({ longitude, latitude, pointCount }) => (\n  <Marker longitude={longitude} latitude={latitude}>\n    <div style={{ ...style, background: \"#f28a25\" }}>{pointCount}</div>\n  </Marker>\n);\n\nconst UrbicaReactHookMap = (props) => {\n  const [hoverSite, setHoverSite] = useState();\n  const [mapPins, setMapPins] = useState([]);\n  const [visible, setVisible] = useState(false);\n\n  const [viewport, setViewport] = useState(props.configuration);\n\n  useEffect(() => {\n    setMapPins(generateRandomDataSet(NUMBER_OF_DATA_POINTS, viewport));\n  }, []);\n\n  // console.log(props);\n\n  return (\n    <div>\n      <button onClick={() => setVisible(!visible)}>\n        {visible ? \"Hide\" : \"Show\"}\n      </button>\n\n      <button onClick={() => setMapPins(generateRandomDataSet(NUMBER_OF_DATA_POINTS, viewport))}>\n        Generate new data points\n      </button>\n\n      <MapGL\n        style={{ width: \"80vw\", height: \"80vh\" }}\n        mapStyle=\"mapbox://styles/mapbox/light-v9\"\n        accessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n        {...viewport}\n        onViewportChange={setViewport}\n      >\n        {!!hoverSite && !!hoverSite.siteName && (\n          <Popup\n            longitude={hoverSite.longitude}\n            latitude={hoverSite.latitude}\n            closeButton={false}\n            closeOnClick={false}\n            style={{\n              color: \"black\",\n            }}\n          >\n            <Dialog>\n              <div>{hoverSite.siteName}</div>\n\n              <div>{hoverSite.lngLat}</div>\n\n              <div>Click to view full site details</div>\n            </Dialog>\n          </Popup>\n        )}\n\n        {visible && (\n          <Cluster\n            // ref={clusterRef}\n            radius={40}\n            extent={512}\n            nodeSize={64}\n            component={ClusterMarker}\n          >\n            {mapPins.length > 0 &&\n              mapPins.map((item, index) => (\n                <Marker\n                  key={item.uniqueId}\n                  longitude={item.lngLat[0]}\n                  latitude={item.lngLat[1]}\n                >\n                  <div\n                    // onClick={() => setCurrentSite(item)}\n                    onMouseEnter={() => setHoverSite(item)}\n                    onMouseLeave={() => setHoverSite(null)}\n                  >\n                    <img src={mapIcon.src} />\n                  </div>\n                </Marker>\n              ))}\n          </Cluster>\n        )}\n      </MapGL>\n    </div>\n  );\n};\n\nexport default UrbicaReactHookMap;\n","/**\n * Function to parse a JS object into a JSON file for download\n */\nexport const saveData = (function () {\n    var a = document.createElement(\"a\");\n    document.body.appendChild(a);\n    a.style = \"display: none\";\n    return function (data, fileName) {\n        var json = JSON.stringify(data),\n            blob = new Blob([json], {type: \"octet/stream\"}),\n            url = window.URL.createObjectURL(blob);\n        a.href = url;\n        a.download = fileName;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    };\n}());\n","const MARGIN_TOP = 10;\nconst MARGIN_LEFT = 10;\nconst CARD_WIDTH = 62;\nconst CARD_HEIGHT = 87;\nconst MARGIN_BETWEEN = 2;\n\n/**\n * Only 9 trading cards per A4 page\n */\nconst TOP_ROW = [1, 2, 3];\nconst MIDDLE_ROW = [4, 5, 6];\nconst BOTTOM_ROW = [7, 8, 9];\n\nconst LEFT_COL = [1, 4, 7];\nconst MIDDLE_COL = [2, 5, 8];\nconst RIGHT_COL = [3, 6, 9];\n\n/**\n * Determines where the next card img placement should be on A4 sheet\n * @param {*} index\n */\nexport const DeterminePosition = (index) => {\n  const position = index % 9 + 1;\n\n  let x = MARGIN_LEFT,\n    y = MARGIN_TOP;\n\n  if (MIDDLE_ROW.includes(position)) {\n    y = MARGIN_TOP + CARD_HEIGHT + MARGIN_BETWEEN;\n  }\n\n  if (BOTTOM_ROW.includes(position)) {\n    y = MARGIN_TOP + CARD_HEIGHT + MARGIN_BETWEEN + CARD_HEIGHT + MARGIN_BETWEEN;\n  }\n\n  if (MIDDLE_COL.includes(position)) {\n    x = MARGIN_LEFT + CARD_WIDTH + MARGIN_BETWEEN;\n  }\n\n  if (RIGHT_COL.includes(position)) {\n    x = MARGIN_LEFT + CARD_WIDTH + MARGIN_BETWEEN + CARD_WIDTH + MARGIN_BETWEEN;\n  }\n\n  return {\n    x,\n    y,\n  };\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Form, Col, Button } from \"react-bootstrap\";\nimport jsPDF from \"jspdf\";\nimport { DeterminePosition } from \"../../Utilities/MagicUtility\";\n\nconst jsPDFSettings = {\n  orientation: \"p\",\n  unit: \"mm\",\n  format: \"a4\",\n};\n\nconst PrintPdf = (props) => {\n  const [users, setUsers] = useState([]);\n  const [showObject, setShowObject] = useState(false);\n\n  const generatePdf = () => {\n    const doc = new jsPDF(jsPDFSettings);\n\n    props.imageUris.map((item, index) => {\n      const { x, y } = DeterminePosition(index);\n\n      doc.addImage(item, \"JPEG\", x, y, 63, 88);\n\n      // Check if end of page && document\n      if (index % 9 === 8 && index !== props.imageUris.length - 1) {\n        doc.addPage(jsPDFSettings);\n      }\n    });\n\n    doc.save(\"proxies.pdf\");\n  };\n\n  console.log(props?.imageUris);\n\n  return (\n    <div>\n      <Button\n        variant=\"Secondary\"\n        onClick={generatePdf}\n        disabled={!props?.imageUris || props?.imageUris?.length < 1}\n      >\n        Print List\n      </Button>\n    </div>\n  );\n};\n\nexport default PrintPdf;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Form, Col, Button } from \"react-bootstrap\";\nimport ScryfallData from \"../../Constants/ScryfallData.json\";\nimport CardDatabase from \"./CardDatabase\";\nimport PrintPdf from \"./PrintPdf\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 80vw;\n  height: 80vh;\n`;\nconst FormContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 40vw;\n  height: 75vh;\n`;\n\nconst Magic = (props) => {\n  const [pdfReady, setPdfReady] = useState(false);\n  const [decklist, setDecklist] = useState(\"Your decklist will be parsed here\");\n  const [imageUris, setImageUris] = useState([]);\n  const [notFound, setNotFound] = useState(['Cards not found will be listed here']);\n\n  const parseData = () => {\n    let notFoundList = [];\n    let parsedDataImages = [];\n\n    // Break decklist into array items\n    const arrayOfLines = decklist.split(\"\\n\");\n\n    arrayOfLines.forEach((item) => {\n      const cardName = item.split(\"1 \")[1];\n\n      const foundCard =\n        ScryfallData.find((element) => element.name === cardName) || cardName;\n\n      if (foundCard?.imageUri) {\n        parsedDataImages.push(foundCard?.imageUri);\n      } else {\n        notFoundList.push(item);\n      }\n    });\n\n    setNotFound(\n      notFoundList.length > 1 ? notFoundList : [\"All items found :)\"]\n    );\n\n    if (parsedDataImages.length > 0) {\n      setPdfReady(true);\n      setImageUris(parsedDataImages);\n    }\n  };\n\n  return (\n    <Container>\n      {/* <CardDatabase /> */}\n\n      <Form>\n        <Form.Group>\n          <Form.Text className=\"text-muted\" id=\"text-area\">\n            Please paste your decklist below.\n          </Form.Text>\n        </Form.Group>\n\n        <Form.Group as={FormContainer} controlId=\"exampleForm.ControlTextarea1\">\n          <Form.Control\n            as=\"textarea\"\n            rows={15}\n            onChange={({ target }) => {\n              setDecklist(target.value);\n            }}\n          />\n\n          <Button onClick={parseData}>Submit</Button>\n\n          <Form.Control as=\"textarea\" readOnly value={notFound} rows={15} />\n\n          <PrintPdf imageUris={imageUris} ready={pdfReady} />\n        </Form.Group>\n      </Form>\n\n      \n    </Container>\n  );\n};\n\nexport default Magic;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport NavBar from \"./Components/Home/NavBar\";\nimport UrbicaReactHookMap from \"./Components/UrbicaMap\";\nimport { urbicaMapConfiguration, SectionEnum } from \"./Constants/Data\";\nimport Magic from \"./Components/Magic/Index\";\n\nfunction App() {\n  const [currentSection, setCurrentSection] = useState(SectionEnum.maps);\n\n  let displayElement = <div />;\n\n  switch (currentSection) {\n    case SectionEnum.maps:\n      displayElement = (\n        <UrbicaReactHookMap configuration={urbicaMapConfiguration} />\n      );\n      break;\n    case SectionEnum.magic:\n      displayElement = <Magic />;\n      break;\n    default:\n      displayElement = <div>Error</div>;\n      break;\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <NavBar setCurrentSection={setCurrentSection} />\n\n        {displayElement}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}>< App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}