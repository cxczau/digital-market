{"version":3,"sources":["Constants/Icons.js","Utilities/Numbers.js","Components/Map.js","Constants/Data.js","App.js","serviceWorker.js","index.js"],"names":["mapIcon","Image","src","process","siteAuditMarkers","BUFFER","generateRandomNumber","from","to","fixedPlaces","Math","random","toFixed","ReactMap","props","state","Map","ReactMapboxGl","accessToken","viewport","data","lngLat","hoverSite","dataset","numberRequired","initialViewport","neighbouringCoords","output","length","newEntry","siteName","uniqueId","push","generateRandomDataSet","this","setState","siteData","console","log","style","center","containerStyle","height","width","type","id","layout","images","map","site","coordinates","longitude","latitude","onMouseEnter","Component","MAP_CONFIG","zoom","jsonData","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f593668e.chunk.js","sourcesContent":["\nexport const basepath = process.env.PUBLIC_URL;\n// export const logo = basepath + LOGO;\n// export const helpIcon = basepath + HELP_ICON;\n// export const closeIcon = basepath + CLOSE_ICON;\n// export const editIcon = `${basepath}/images/icons/edit.svg`;\n// export const deleteIcon = `${basepath}/images/icons/delete.svg`;\n\nexport const mapIcon = new Image(15, 22.5);\nmapIcon.src = `${basepath}/images/icons/droplet_purple.svg`;\nexport const siteAuditMarkers = [\"mapIcon\", mapIcon];\n\n// const bullseye = new Image(100, 100);\n// bullseye.src = `${basepath}/images/icons/bullseye.svg`;\n// export const bullseyeIcon = [\"bullseye\", bullseye];\n\n// const iconA = new Image(15, 22.5);\n// iconA.src = `${basepath}/images/icons/droplet_darkblue.svg`;\n// const mapIconA = [\"iconA\", iconA];\n\n// const iconB = new Image(15, 22.5);\n// iconB.src = `${basepath}/images/icons/droplet_green.svg`;\n// const mapIconB = [\"iconB\", iconB];\n\n// const iconC = new Image(15, 22.5);\n// iconC.src = `${basepath}/images/icons/droplet_lightblue.svg`;\n// const mapIconC = [\"iconC\", iconC];\n\n// const iconD = new Image(15, 22.5);\n// iconD.src = `${basepath}/images/icons/droplet_orange.svg`;\n// const mapIconD = [\"iconD\", iconD];\n\n// const iconE = new Image(15, 22.5);\n// iconE.src = `${basepath}/images/icons/droplet_pink.svg`;\n// const mapIconE = [\"iconE\", iconE];\n\n// export const filterLayerIcons = [\n//     mapIconA,\n//     mapIconB,\n//     mapIconC,\n//     mapIconD,\n//     mapIconE,\n// ]\n","const BUFFER = 0.5;\n\nconst generateRandomNumber = (from, to, fixedPlaces) => {\n  return (Math.random() * (to - from) + from).toFixed(fixedPlaces) * 1;\n};\n\nconst generateRandomCoordinates = (neighbouringCoords) => {\n  if (neighbouringCoords) {\n    return [\n      // Generates random longitude value\n      generateRandomNumber(\n        neighbouringCoords[0] - BUFFER,\n        neighbouringCoords[0] + BUFFER,\n        3\n      ),\n      // Generates random latitude value\n      generateRandomNumber(\n        neighbouringCoords[1] - BUFFER,\n        neighbouringCoords[1] + BUFFER,\n        3\n      ),\n    ];\n  }\n\n  return [generateRandomNumber(-180, 180, 3), generateRandomNumber(-90, 90, 3)];\n};\n\nexport const generateRandomDataSet = (numberRequired, initialViewport) => {\n  const output = [];\n\n  if (numberRequired > 0 && initialViewport) {\n    while (output.length < numberRequired) {\n      const newEntry = {\n        siteName: `Site # ${output.length + 1}`,\n        lngLat: generateRandomCoordinates(initialViewport),\n        uniqueId: output.length + 1,\n      };\n\n      output.push(newEntry);\n    }\n  }\n\n  return output;\n};\n","import React, { useState, Component } from \"react\";\nimport ReactMapboxGl, { Feature, Layer, Popup } from \"react-mapbox-gl\";\nimport { siteAuditMarkers } from \"../Constants/Icons\";\nimport { generateRandomDataSet } from \"../Utilities/Numbers\";\n\nexport class ReactMap extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      Map: ReactMapboxGl({\n        accessToken: process.env.REACT_APP_MAPBOX_TOKEN,\n      }),\n      viewport: props.data.lngLat,\n      // initialZoom: props.data.zoom,\n      hoverSite: {},\n    };\n  }\n\n  componentDidMount() {\n    const dataset = generateRandomDataSet(30, this.props.data.lngLat);\n\n    this.setState({ dataset });\n  }\n\n  render() {\n    const { siteData } = this.props;\n\n    const { Map, hoverSite, viewport, dataset } = this.state;\n\n    console.log(this.state);\n\n    return (\n      <div>\n        <Map\n          style=\"mapbox://styles/mapbox/streets-v11\"\n          center={viewport}\n          containerStyle={{\n            height: \"80vh\",\n            width: \"80vw\",\n          }}\n        >\n          {/* {hoverSite?.siteName && (\n            <Popup\n              coordinates={hoverSite.lngLat}\n              closeButton={false}\n              closeOnClick={false}\n            >\n              {`Hello, this site is called ${hoverSite.siteName}`}\n            </Popup>\n          )} */}\n\n          <Layer\n            type=\"symbol\"\n            id=\"marker\"\n            layout={{ \"icon-image\": \"mapIcon\", \"icon-allow-overlap\": true }}\n            images={siteAuditMarkers}\n          >\n            {siteData.map((site) => (\n              <Feature\n                key={site.uniqueId}\n                coordinates={[site.longitude, site.latitude]}\n                onMouseEnter={() => {\n                  this.setState({ hoverSite: site });\n                }}\n                // onMouseLeave={() => {\n                //   this.setState({ hoverSite: {} });\n                // }}\n              />\n            ))}\n          </Layer>\n\n          <Layer\n            type=\"symbol\"\n            id=\"marker\"\n            layout={{ \"icon-image\": \"mapIcon\", \"icon-allow-overlap\": true }}\n            images={siteAuditMarkers}\n          >\n            {dataset && dataset.map((site) => (\n              <Feature\n                key={site.uniqueId}\n                coordinates={site.lngLat}\n                onMouseEnter={() => {\n                  this.setState({ hoverSite: site });\n                }}\n                // onMouseLeave={() => {\n                //   this.setState({ hoverSite: {} });\n                // }}\n              />\n            ))}\n          </Layer>\n        </Map>\n      </div>\n    );\n  }\n}\n","export const MAP_CONFIG = {\n  lngLat: [147.19554, -31.5632],\n  zoom: [10],\n};\n\nexport const jsonData = [\n  {\n    siteName: \"Position 1\",\n    lngLat: [147.19554, -31.5632],\n    longitude: 147.19554,\n    latitude: -31.5632,\n    uniqueId: 1,\n  },\n  {\n    siteName: \"Position 2\",\n    lngLat: [147.19554, -31.5661],\n    longitude: 147.19812,\n    latitude: -31.5661,\n    uniqueId: 2,\n  },\n  {\n    siteName: \"Position 3\",\n    lngLat: [147.19554, -31.57],\n    longitude: 147.19812,\n    latitude: -31.57,\n    uniqueId: 3,\n  },\n  {\n    siteName: \"Position 4\",\n    lngLat: [147.19812, -31.58],\n    longitude: 147.19812,\n    latitude: -31.58,\n    uniqueId: 4,\n  },\n];\n","import React from 'react';\nimport './App.css';\nimport { ReactMap } from './Components/Map';\nimport ReactHookMap from './Components/MapWithHooks';\nimport { jsonData, MAP_CONFIG } from './Constants/Data';\n\nfunction App() {\n  \n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ReactMap \n          siteData={jsonData}\n          data={MAP_CONFIG}\n        />\n        {/* <ReactHookMap \n          mapData={jsonData}\n          data={MAP_CONFIG}\n        /> */}\n        \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}